<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

let lines = OpenTextFile(fileName: "day7_0")

let regexPrefix = try! NSRegularExpression(pattern: #"(.+) bags contain"#)
let regexBody = try! NSRegularExpression(pattern: #"(\d+) ([^,.]+) bag[s]{0,}"#)

var result: [String:Set&lt;String&gt;] = [:]

lines[0..&lt;lines.count-1].forEach {
    let res = parseLine(line: $0)
    res.1.keys.forEach {
        if result[$0] == nil {
            result[$0] = []
        }
        result[$0]!.insert(res.0)
    }
}

let rootKey = "shiny gold"
print(traverse(bags: result[rootKey]!).count)

func traverse(bags: Set&lt;String&gt;) -&gt; Set&lt;String&gt; {
    var res = Set&lt;String&gt;(bags)
    bags.forEach {
        if result[$0] != nil {
            res.formUnion(traverse(bags: result[$0]!))
        }
    }
    return Set&lt;String&gt;(res)
}

func parseLine(line: String) -&gt; (String, [String:Int]) {
    let range = NSRange(location: 0, length: line.utf16.count)
    let match = regexPrefix.firstMatch(in: line, options: [], range: range)
    let main = String(line[Range(match!.range(at: 1), in: line)!])
    
    var dict: [String:Int] = [:]
    let matches = regexBody.matches(in: line, options: [], range: range)
    matches.enumerated().forEach {
        let bagName = String(line[Range($0.element.range(at: 2), in: line)!])
        dict[bagName] = Int(line[Range($0.element.range(at: 1), in: line)!])!
    }
    return (main, dict)
}
</string>
			<key>ModifiedRange</key>
			<string>{0, 1373}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
